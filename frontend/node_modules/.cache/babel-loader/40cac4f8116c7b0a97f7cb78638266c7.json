{"ast":null,"code":"var _jsxFileName = \"/home/ts/Desktop/PracticeReactjs/Fullstack_Project/Django-React Ecommerce/frontend/src/screens/OrderLineChartScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n\n// Function to format date to YYYY-MM\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  return `${year}-${month}`;\n};\n\n// Function to aggregate data by month\nconst aggregateDataByMonth = orders => {\n  const monthlyData = {};\n  orders.forEach(order => {\n    const month = formatDate(order.createdAt);\n    if (!monthlyData[month]) {\n      monthlyData[month] = 0;\n    }\n    monthlyData[month] += order.totalPrice;\n  });\n  return Object.entries(monthlyData).map(([month, totalPrice]) => ({\n    month,\n    totalPrice\n  }));\n};\nconst OrderChartScreen = () => {\n  _s();\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Example of fetching from API\n        // const response = await fetch('https://api.example.com/orders');\n        // const fetchedData = await response.json();\n\n        // For demo, use local storage\n        const fetchedData = JSON.parse(localStorage.getItem('orders')) || [];\n        if (fetchedData.length === 0) {\n          setError('No orders available.');\n        } else {\n          const paidOrders = fetchedData.filter(order => order.isPaid);\n          setMonthlyData(aggregateDataByMonth(paidOrders));\n        }\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        setError('Failed to fetch data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '25px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '25px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '25px',\n      overflowX: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monthly Order Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), monthlyData.length === 0 ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"info\",\n      children: \"No paid orders to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '70vh'\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: monthlyData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"month\",\n            tickFormatter: value => value,\n            domain: ['auto', 'auto'],\n            angle: -30 // Rotate labels for better readability\n            ,\n            textAnchor: \"end\",\n            height: 80 // Add height to ensure labels are visible\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"totalPrice\",\n            fill: \"#007bff\" // Blue color\n            ,\n            barSize: 20 // Slim columns\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(OrderChartScreen, \"Jt3bWNJbeoDkn3chYHCUXsTHa7U=\");\n_c = OrderChartScreen;\nexport default OrderChartScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderChartScreen\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Loader","Message","jsxDEV","_jsxDEV","formatDate","dateString","date","Date","year","getFullYear","month","getMonth","toString","padStart","aggregateDataByMonth","orders","monthlyData","forEach","order","createdAt","totalPrice","Object","entries","map","OrderChartScreen","_s","setMonthlyData","loading","setLoading","error","setError","fetchData","fetchedData","JSON","parse","localStorage","getItem","length","paidOrders","filter","isPaid","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","overflowX","width","height","data","strokeDasharray","dataKey","tickFormatter","value","domain","angle","textAnchor","fill","barSize","_c","$RefreshReg$"],"sources":["/home/ts/Desktop/PracticeReactjs/Fullstack_Project/Django-React Ecommerce/frontend/src/screens/OrderLineChartScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n\n// Function to format date to YYYY-MM\nconst formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    return `${year}-${month}`;\n};\n\n// Function to aggregate data by month\nconst aggregateDataByMonth = (orders) => {\n    const monthlyData = {};\n\n    orders.forEach(order => {\n        const month = formatDate(order.createdAt);\n        if (!monthlyData[month]) {\n            monthlyData[month] = 0;\n        }\n        monthlyData[month] += order.totalPrice;\n    });\n\n    return Object.entries(monthlyData).map(([month, totalPrice]) => ({\n        month,\n        totalPrice\n    }));\n};\n\nconst OrderChartScreen = () => {\n    const [monthlyData, setMonthlyData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Example of fetching from API\n                // const response = await fetch('https://api.example.com/orders');\n                // const fetchedData = await response.json();\n\n                // For demo, use local storage\n                const fetchedData = JSON.parse(localStorage.getItem('orders')) || [];\n                if (fetchedData.length === 0) {\n                    setError('No orders available.');\n                } else {\n                    const paidOrders = fetchedData.filter(order => order.isPaid);\n                    setMonthlyData(aggregateDataByMonth(paidOrders));\n                }\n            } catch (error) {\n                console.error('Failed to fetch data:', error);\n                setError('Failed to fetch data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    if (loading) {\n        return (\n            <div style={{ padding: '25px' }}>\n                <Loader /> {/* Show loader while fetching data */}\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div style={{ padding: '25px' }}>\n                <Message variant='danger'>{error}</Message> {/* Show error message */}\n            </div>\n        );\n    }\n\n    return (\n        <div style={{ padding: '25px', overflowX: 'auto' }}>\n            <h1>Monthly Order Chart</h1>\n            {monthlyData.length === 0 ? (\n                <Message variant='info'>No paid orders to display</Message>\n            ) : (\n                <div style={{ width: '100%', height: '70vh' }}> {/* Adjusted height to be responsive */}\n                    <ResponsiveContainer>\n                        <BarChart data={monthlyData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis\n                                dataKey=\"month\"\n                                tickFormatter={(value) => value}\n                                domain={['auto', 'auto']}\n                                angle={-30} // Rotate labels for better readability\n                                textAnchor=\"end\"\n                                height={80} // Add height to ensure labels are visible\n                            />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Bar \n                                dataKey=\"totalPrice\" \n                                fill=\"#007bff\" // Blue color\n                                barSize={20} // Slim columns\n                            />\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default OrderChartScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}